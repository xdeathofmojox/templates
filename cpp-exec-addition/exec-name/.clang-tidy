Checks:	'-*,
  boost-*,
  bugprone-*,
  cert-*,
  concurrency-*,
  cppcoreguidelines-*,
  google-*,
  misc-*,
  modernize-*,
  performance-*,
  readability-*'
HeaderFileExtensions: ['', 'h', 'hpp', 'tpp']
ImplementationFileExtensions: ['c','cc','cpp']
HeaderFilterRegex: 'include'
FormatStyle: file
UseColor: true
CheckOptions:
  - { key: boost-use-ranges.IncludeStyle,                                                               value: google     }
  - { key: bugprone-argument-comment.StrictMode,                                                        value: true       }
  - { key: bugprone-argument-comment.CommentBoolLiterals,                                               value: true       }
  - { key: bugprone-argument-comment.CommentIntegerLiterals,                                            value: true       }
  - { key: bugprone-argument-comment.CommentFloatLiterals,                                              value: true       }
  - { key: bugprone-argument-comment.CommentStringLiterals,                                             value: true       }
  - { key: bugprone-argument-comment.CommentCharacterLiterals,                                          value: true       }
  - { key: bugprone-argument-comment.CommentUserDefinedLiterals,                                        value: true       }
  - { key: bugprone-argument-comment.CommentNullPtrs,                                                   value: true       }
  - { key: bugprone-misplaced-widening-cast.CheckImplicitCasts,                                         value: true       }
  - { key: bugprone-narrowing-conversions.WarnWithinTemplateInstantiation,                              value: true       }
  - { key: bugprone-narrowing-conversions.PedanticMode,                                                 value: true       }
  - { key: bugprone-sizeof-expression.WarnOnSizeOfIntegerExpression,                                    value: true       }
  - { key: bugprone-sizeof-expression.WarnOnSizeOfPointer,                                              value: true       }
  - { key: bugprone-stringview-nullptr.IncludeStyle,                                                    value: google     }
  - { key: bugprone-suspicious-enum-usage.StrictMode,                                                   value: 1          }
  - { key: bugprone-suspicious-string-compare.WarnOnLogicalNotComparison,                               value: true       }
  - { key: cert-str34-c.DiagnoseSignedUnsignedCharComparisons,                                          value: true       }
  - { key: cppcoreguidelines-avoid-magic-numbers.IgnoredFloatingPointValues,                            value: ''         }
  - { key: cppcoreguidelines-avoid-magic-numbers.IgnoredIntegerValues,                                  value: '0;1;'     }
  - { key: cppcoreguidelines-init-variables.IncludeStyle,                                               value: google     }
  - { key: cppcoreguidelines-narrowing-conversions.PedanticMode,                                        value: true       }
  - { key: cppcoreguidelines-narrowing-conversions.WarnWithinTemplateInstantiation,                     value: true       }
  - { key: cppcoreguidelines-pro-bounds-constant-array-index.IncludeStyle,                              value: google     }
  - { key: cppcoreguidelines-pro-type-const-cast.StrictMode,                                            value: true       }
  - { key: google-readability-function-size.BranchThreshold,                                            value: 4          }
  - { key: google-readability-function-size.LineThreshold,                                              value: 100        }
  - { key: google-readability-function-size.NestingThreshold,                                           value: 3          }
  - { key: google-readability-function-size.ParameterThreshold,                                         value: 4          }
  - { key: google-readability-function-size.VariableThreshold,                                          value: 8          }
  - { key: google-readability-namespace-comments.ShortNamespaceLines,                                   value: 1          }
  - { key: misc-non-private-member-variables-in-classes.IgnoreClassesWithAllMemberVariablesBeingPublic, value: true       }
  - { key: misc-uniqueptr-reset-release.IncludeStyle,                                                   value: google     }
  - { key: misc-unused-parameters.StrictMode,                                                           value: true       }
  - { key: modernize-loop-convert.IncludeStyle,                                                         value: google     }
  - { key: modernize-make-shared.IncludeStyle,                                                          value: google     }
  - { key: modernize-make-unique.IncludeStyle,                                                          value: google     }
  - { key: modernize-min-max-use-initializer-list.IncludeStyle,                                         value: google     }
  - { key: modernize-pass-by-value.IncludeStyle,                                                        value: google     }
  - { key: modernize-replace-auto-ptr.IncludeStyle,                                                     value: google     }
  - { key: modernize-replace-random-shuffle.IncludeStyle,                                               value: google     }
  - { key: modernize-use-ranges.IncludeStyle,                                                           value: google     }
  - { key: modernize-use-std-format.IncludeStyle,                                                       value: google     }
  - { key: modernize-use-std-format.StrictMode,                                                         value: true       }
  - { key: modernize-use-std-numbers.IncludeStyle,                                                      value: google     }
  - { key: modernize-use-std-print.IncludeStyle,                                                        value: google     }
  - { key: modernize-use-std-print.StrictMode,                                                          value: true       }
  - { key: performance-inefficient-string-concatenation.StrictMode,                                     value: true       }
  - { key: performance-type-promotion-in-math-fn.IncludeStyle,                                          value: google     }
  - { key: performance-unnecessary-value-param.IncludeStyle,                                            value: google     }
  - { key: readability-function-size.BranchThreshold,                                                   value: 4          }
  - { key: readability-function-size.LineThreshold,                                                     value: 100        }
  - { key: readability-function-size.NestingThreshold,                                                  value: 3          }
  - { key: readability-function-size.ParameterThreshold,                                                value: 4          }
  - { key: readability-function-size.VariableThreshold,                                                 value: 8          }
  - { key: readability-inconsistent-declaration-parameter-name.Strict,                                  value: true       }
  - { key: readability-magic-numbers.IgnoredFloatingPointValues,                                        value: ''         }
  - { key: readability-magic-numbers.IgnoredIntegerValues,                                              value: '0;1;'     }
  - { key: readability-use-std-min-max.IncludeStyle,                                                    value: google     }
  - { key: readability-identifier-naming.VariableCase,                                                  value: lower_case }
  - { key: readability-identifier-naming.LocalVariableCase,                                             value: lower_case }
  - { key: readability-identifier-naming.GlobalVariableCase,                                            value: lower_case }
  - { key: readability-identifier-naming.MemberVariableCase,                                            value: lower_case }
  - { key: readability-identifier-naming.ClassCase,                                                     value: CamelCase  }
  - { key: readability-identifier-naming.StructCase,                                                    value: CamelCase  }
  - { key: readability-identifier-naming.UnionCase,                                                     value: CamelCase  }
  - { key: readability-identifier-naming.EnumCase,                                                      value: CamelCase  }
  - { key: readability-identifier-naming.FunctionCase,                                                  value: camelBack  }
  - { key: readability-identifier-naming.PrivateMethodCase,                                             value: camelBack  }
  - { key: readability-identifier-naming.ParameterCase,                                                 value: lower_case }
  - { key: readability-identifier-naming.NamespaceCase,                                                 value: lower_case }
  - { key: readability-identifier-naming.MacroDefinitionCase,                                           value: UPPER_CASE }
  - { key: readability-identifier-naming.ClassMemberSuffix,                                             value: _          }
  - { key: readability-identifier-naming.PrivateMemberSuffix,                                           value: _          }
  - { key: readability-identifier-naming.ProtectedMemberSuffix,                                         value: _          }
  - { key: readability-identifier-naming.EnumConstantCase,                                              value: CamelCase  }
  - { key: readability-identifier-naming.EnumConstantPrefix,                                            value: k          }
  - { key: readability-identifier-naming.ConstexprVariableCase,                                         value: CamelCase  }
  - { key: readability-identifier-naming.ConstexprVariablePrefix,                                       value: k          }
  - { key: readability-identifier-naming.GlobalConstantCase,                                            value: CamelCase  }
  - { key: readability-identifier-naming.GlobalConstantPrefix,                                          value: k          }
  - { key: readability-identifier-naming.MemberConstantCase,                                            value: CamelCase  }
  - { key: readability-identifier-naming.MemberConstantPrefix,                                          value: k          }
  - { key: readability-identifier-naming.StaticConstantCase,                                            value: CamelCase  }
  - { key: readability-identifier-naming.StaticConstantPrefix,                                          value: k          }